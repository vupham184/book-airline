<?php
defined('_JEXEC') or die;

class SfsModelRooming extends JModelLegacy
{
	private $_vouchers 					= null;
	private $_passenger_maxium_number 	= null;
	private $_reservation			 	= null;

	protected function populateState()
	{
		$app = JFactory::getApplication('site');

		// Load state from the request.
		$value = JRequest::getVar('blockcode');
		$this->setState('rooming.code', $value);

		if( !$value ) {
			$value = JRequest::getVar('code');
			$this->setState('rooming.code', $value);
		}
		$value = JRequest::getVar('airport');
		$this->setState('rooming.airport', $value);

		// Load the parameters.
		$params = $app->getParams();
		$this->setState('params', $params);
	}

	public function check()
	{
		$reservation = $this->getReservation();
		if( !$reservation )
		{
			$this->setError('Block code '.$this->getState('rooming.code').' is not available.');
			return false;
		}

		return true;
	}

	/**
	 * Method to send rooming list to airline
	 *
	 */
	public function confirm()
	{
		$reservation = $this->getReservation();
		$db = $reservation->getDbo();

		if( $reservation->status == 'P' || $reservation->status == 'O' ||  $reservation->status == 'C' )
		{
			// Gets passengers inputed by the hotel administrator
			$passengers = $this->getPassengers();

			//Gets the voucher generated by SFS Administrator
			$guaranteeIssuedVoucher = $this->getGuaranteeVoucher();

			if ( !count($passengers) && !$guaranteeIssuedVoucher )
			{
				return false;
			}

			if( count($passengers) )
			{
				if( ! $this->saveToDatabase($passengers) ) {
					$this->setError('Invalid vouchers');
					return false;
				}

				$query = 'SELECT DISTINCT a.voucher_id FROM #__sfs_voucher_details AS a';
				$query .= ' INNER JOIN #__sfs_voucher_codes AS b ON b.id=a.voucher_id';
				$query .= ' WHERE b.booking_id='.$reservation->id.' AND b.vgroup=0 AND b.status < 3';
			    $db->setQuery($query);
				$rows = $db->loadObjectList();

				$claimed_rooms = count($rows);

				$query = 'SELECT DISTINCT a.voucher_id,b.sdroom, b.troom, b.sroom, b.qroom FROM #__sfs_voucher_details AS a';
				$query .= ' INNER JOIN #__sfs_voucher_codes AS b ON b.id=a.voucher_id';
				$query .= ' WHERE b.booking_id='.$reservation->id.' AND b.vgroup=1 AND b.status < 3';
			    $db->setQuery($query);

				$groupVouchers = $db->loadObjectList();

				if( count($groupVouchers) )
				{
					foreach ($groupVouchers as $gvoucher)
					{
						$claimed_rooms += (int)$gvoucher->sroom + (int)$gvoucher->sdroom + (int)$gvoucher->troom + (int)$gvoucher->qroom;
					}
				}

				if((int)$claimed_rooms) {
					$query = 'UPDATE #__sfs_reservations SET claimed_rooms='.$claimed_rooms.' WHERE id='.$reservation->id;
					$db->setQuery($query);
					$db->query();

					$this->_reservation->claimed_rooms = $claimed_rooms;
				}

			}

			$user = JFactory::getUser();

			$rooming_message = JRequest::getVar('rooming_message');

			if($rooming_message)
			{
				//insert message
				$message = new stdClass();

				$message->block_id 	  	= $reservation->id;
				$message->from     	  	= $user->id;
				$message->type    	 	= 2;
				$message->from_name  	= $user->name;
				$message->posted_date 	= JFactory::getDate()->toSql();
				$message->body 			= str_replace(array("\n"), '<br />',$rooming_message);

				$db->insertObject('#__sfs_messages', $message);
			}

			$status = 'T';

			if( $reservation->payment_type == 'passenger' ){
				$status = 'A';
			}

			if($reservation->status == 'P' || $reservation->status == 'O' || $reservation->status == 'C'){
				$this->updateStatus($reservation, $status);
			}

			if( $reservation->status == 'C' ) $status = 'T';

			//email to airline
			SEmail::hotelChangeStatusTo($status, $reservation);
		}

		return true;
	}

	// Cached
	public function save($source = null)
	{		
		if( is_null($source) ) {
			$data = JRequest::getVar( 'vouchers' , array() , 'post' , 'array' );
		} else {
			$data = $source;
		}


		$reservation = $this->getReservation();
		
		$db = $reservation->getDbo();

		
		
		// Gets the vouchers made by the airline
		$vouchers = $this->getVouchers('code');

        //Update claimed_rooms
        $pickup_rooms = 0;
        $pickup = $reservation->getPickedRooms();
        foreach($pickup as $value)
        {
            $pickup_rooms += $value;
        }
        $reservationObject = new stdClass();
        $reservationObject->id = $reservation->id;
        $reservationObject->claimed_rooms = $pickup_rooms;

        $db->updateObject('#__sfs_reservations', $reservationObject,'id');

		$mapIndividualVouchers = array();
		foreach($vouchers as $v) {
			$voucherObj = SVoucher::getInstance($v->id, 'id');
			$individualVouchers = $voucherObj->getIndividualVouchers(true);
			$v->invidiualVouchers = $individualVouchers;
			if($individualVouchers) {
				foreach($individualVouchers as $iv) {
					$iv->voucher = $v;
					$mapIndividualVouchers[$iv->code] = $iv;
				}
			}

		}

		//var_dump($mapIndividualVouchers);die();

		//Gets the voucher generated by SFS Administrator
		$guaranteeIssuedVoucher = $this->getGuaranteeVoucher();

		if( ! count($vouchers) && ! $guaranteeIssuedVoucher ) {
			$this->setError( JText::_('COM_SFS_ROOMING_VOUCHERS_NOT_AVAILABLE') );
			return false;
		}

		$ok = false;

		if(count($vouchers))
		{
			$result = array();
			$checkSeats = array();

			$countInputGuests = 0;
			$countCorrectGuests = 0;

			$individualVouchers = null;

			foreach ( $data as $v )
			{
				$v['voucher_number'] = trim($v['voucher_number']);
				if( strlen($v['first_name']) > 0 && strlen($v['last_name']) && strlen($v['voucher_number']) > 0 )
				{
					$countInputGuests++;
#echo '<pre>';
#var_dump($v['voucher_number']);
#var_dump($mapIndividualVouchers[$v['voucher_number']]);
					$voucher_id = intval( $vouchers[$v['voucher_number']]->id );
					$individualVoucherID = intval( $mapIndividualVouchers[$v['voucher_number']]->id);
					if($individualVoucherID) {
						$voucher_id = intval( $mapIndividualVouchers[$v['voucher_number']]->voucher_groups_id);
					}
#var_dump($voucher_id);die();
					$v['status'] = $voucher_id > 0 ? 1 : 0;

					if($voucher_id){

						$countCorrectGuests++;

						if( ! isset($checkSeats[$v['voucher_number']]) ) {
							$checkSeats[$v['voucher_number']] = 0;
						}
						$checkSeats[$v['voucher_number']] = $checkSeats[$v['voucher_number']] + 1;
						if( $checkSeats[$v['voucher_number']] > $vouchers[$v['voucher_number']]->seats ) {
							$v['status'] = 0;
						}
					}

					$result[] = $v;
				}
			}

			$voucherObj = SVoucher::getInstance($voucher_id, 'id');
			
            if(!$this->getPassengers()){
                foreach($data as $passenger) {
                    if (strlen($passenger['first_name']) || strlen($passenger['last_name']))
                    {                 
                      
                        $passengerObject = new stdClass();
                        // $passengerObject->id = $passenger['id'];
                        $passengerObject->first_name = $passenger['first_name'];
                        $passengerObject->last_name = $passenger['last_name'];
                        $passengerObject->individual_voucher = $individualVoucherID;
                        $passengerObject->voucher_id = $vouchers[$passenger['voucher_number']]->id;

                       	$db->insertObject('#__sfs_passengers', $passengerObject);
                       	// $db->insertObject('#__sfs_trace_passengers', $passengerObject);

                    }
                }
               
            }else{
                foreach($data as $passenger) {
                	
                    if (strlen($passenger['first_name']) || strlen($passenger['last_name']))
                    {
                        $voucher_id = intval( $vouchers[$passenger['voucher_number']]->id );
                        $individualVoucherID = intval( $mapIndividualVouchers[$passenger['voucher_number']]->id);
                        if($individualVoucherID) {
                            $voucher_id = intval( $mapIndividualVouchers[$passenger['voucher_number']]->voucher_groups_id);
                        }

                        $passengerObject = new stdClass();
                        $passengerObject->id = $passenger['id'];
                        $passengerObject->first_name = $passenger['first_name'];
                        $passengerObject->last_name = $passenger['last_name'];
                        ///$passengerObject->individual_voucher = $individualVoucherID;
                        $query = 'SELECT COUNT(*) AS countID FROM #__sfs_passengers WHERE id='.$passenger['id'];
                        $db->setQuery($query);
                        $exist = (int)$db->loadResult();
                        
                        if($exist) {
                            $db->updateObject('#__sfs_passengers', $passengerObject,'id');
                        } else {
                            $passengerObject->voucher_id = $voucher_id;
                            $passengerObject->id = null;
                            $db->insertObject('#__sfs_passengers', $passengerObject);
                        }
                    }
                }
            }


			if( $countCorrectGuests == $countInputGuests ) {
				$ok = true;
			}
		}

		// Process minimum guarantee voucher number
		$guaranteeVouchers = JRequest::getVar( 'guaranteeVouchers' , array() , 'post' , 'array' );

		if ( $guaranteeIssuedVoucher && count($guaranteeVouchers) ) {
			$correctVoucherCount = 0;
			foreach ( $guaranteeVouchers as $guaranteeVoucher )
			{
				if( isset($guaranteeVoucher['voucher_number']) && ($guaranteeVoucher['voucher_number'] == $guaranteeIssuedVoucher->code)  ) {
					$correctVoucherCount++;
				}
			}
			if($correctVoucherCount)
			{
				$guaranteeIssuedVoucher->issued = $correctVoucherCount;
				$db->updateObject('#__sfs_fake_vouchers', $guaranteeIssuedVoucher, 'id' );
				$session = JFactory::getSession();
				$session->set('guaranteeVouchers',$guaranteeVouchers);
				$ok = true;
			}
		}

//		if ( $reservation->status == 'O' ) {
//            //update status to Archived
//            $this->updateStatus($reservation, 'A');
//        }

            //Update Claimed room
//            $reservationObject = new stdClass();
//            $reservationObject->id = $reservation->id;
//            $reservationObject->claimed_rooms = $reservation->claimed_rooms + 1;
//            $db->updateObject('#__sfs_reservations', $reservationObject,'id');
//		}

		return $ok;
	}

	public function updateStatus($reservation, $status)
	{
		$user = JFactory::getUser();

		if( !$status ) return false;

		if( !$reservation )
		{
			$reservation = $this->getReservation();
		}

		$db = $reservation->getDbo();

		$query = 'UPDATE #__sfs_reservations SET status=' . $db->quote($status);

		if( SFSAccess::isHotel() ) {
			$query .= ',hotel_user_id='.$user->id;
		}

		if ($status == 'A') {
        	$now = JFactory::getDate()->toSql();
            $query .= ',approved_date=' . $db->quote($now);
        }

        $revenue_booked = 0;

		if($status != 'O' && $status != 'P')
		{
			$total_room_charge = $reservation->getTotalRoomCharge();
		    $picked_mealplans  = $reservation->calculateTotalMealplan();
			$picked_breakfasts = $reservation->calculateTotalBreakfast();
			$picked_lunchs 	   = $reservation->calculateTotalLunch();
			$total_mealplan_charge = $reservation->getTotalMealplanCharge() + ( $picked_breakfasts * $reservation->breakfast) + ($picked_lunchs * $reservation->lunch);
			$revenue_booked = $total_room_charge + $total_mealplan_charge;
			$query .= ',revenue_booked='.$revenue_booked;
		}

		$query .= ' WHERE id='.(int)$reservation->id;

		$db->setQuery($query);
		if( ! $db->query() )
		{
			$this->setError($db->getErrorMsg());
			return false;
		}

		if( (int) $reservation->association_id > 0 )
		{
			if( SFSAccess::isHotel() ) {
				$externalAirport = $this->getState('rooming.airport');
				if($externalAirport)
				{
					$db 	= JFactory::getDbo();
					$query  = 'UPDATE #__sfs_reservation_airport_map SET status='.$db->quote($status);
					$query .= ',s_room_issued='.$reservation->s_room_issued;
					$query .= ',sd_room_issued='.$reservation->sd_room_issued;
					$query .= ',t_room_issued='.$reservation->t_room_issued;
					$query .= ',q_room_issued='.$reservation->q_room_issued;
					$query .= ',claimed_rooms='.$reservation->claimed_rooms;
					$query .= ',revenue_booked='.$revenue_booked;
					$query .= ' WHERE reservation_id='.$reservation->id.' AND airport='.$db->quote($externalAirport);
					$db->setQuery($query);
					$db->query();
				}
			}
			if( SFSAccess::isAirline() )
			{
				$airline     = SFactory::getAirline();
				$association = SFactory::getAssociation($reservation->association_id);
				$query  = 'UPDATE #__sfs_reservation_airport_map SET status='.$db->quote($status);
				$query .= ' WHERE reservation_id='.$reservation->id.' AND airport='.$association->db->quote($airline->airport_code);
				$association->db->setQuery($query);
				$association->db->query();
			}
		}

		return true;
	}

	public function approveBlock()
	{
		$reservationId = JRequest::getInt('id');
		$reservation   = SReservation::getInstance($reservationId);
		if($reservation)
		{
			$this->updateStatus($reservation, 'A');
			SEmail::airlineChangeStatusTo('A', $reservation);
			return true;
		}
		return false;
	}

	//save
	public function saveToDatabase( $data )
	{
		$date = JFactory::getDate();
		$reservation = $this->getReservation();
		$db = $reservation->getDbo();

		$insertQueries = array();

		//get vouchers made by airline
		$vouchers = $this->getVouchers('code');

		if( ! count($vouchers) ) {
			$this->setError( JText::_('COM_SFS_ROOMING_VOUCHERS_NOT_AVAILABLE') );
			return false;
		}

		$query = 'SELECT a.id FROM #__sfs_voucher_details AS a';
		$query .= ' INNER JOIN #__sfs_voucher_codes AS b ON b.id=a.voucher_id';
		$query .= ' WHERE b.booking_id='.$reservation->id;

		$db->setQuery($query);
		$passengers = $db->loadObjectList();


		//empty old data
		if( count($passengers) ) {

			$deleteIDs = array();

			foreach ($passengers as $passenger) {
				$deleteIDs[] = $passenger->id;
			}

			$query = 'DELETE FROM #__sfs_voucher_details';
			$query .=' WHERE id IN ('.implode(',', $deleteIDs).')';

			$db->setQuery($query);
			if( ! $db->query() ) {
				$this->setError($db->getErrorMsg());
				return false;
			}
		}


		foreach ( $data as $v )
		{
			$sessItem = new stdClass();
            $sessItem->first_name = trim ( $v->first_name);
            $sessItem->last_name = trim ( $v->last_name );
            $sessItem->voucher_number = trim ( $v->voucher_id );

			// validate the row
			if( strlen($sessItem->first_name) > 0 && strlen($sessItem->last_name) && strlen($sessItem->voucher_number) > 0 )
			{
				//get voucher id
				$voucher_id = intval( $sessItem->voucher_number );

				if( (int) $voucher_id > 0 ) {
					$insertQueries[] = '(0, '.$voucher_id.', '.$db->Quote($sessItem->first_name).', '.$db->Quote($sessItem->last_name).', 1, '.$db->Quote($date->toSQL()).')';
				}

			}
		}

		if( count($insertQueries) ) {

			$query = 'INSERT INTO #__sfs_voucher_details(id,voucher_id,first_name,last_name,status,created) VALUES ';
			$query .= implode(',', $insertQueries);

			$db->setQuery($query);
			if( !$db->query() )
			{
				$this->setError($db->getErrorMsg());
				return false;
			}
		}

		return true;
	}

	/**
	 * Method to save guest from CSV file
	 *
	 */
	public function saveFromCsv()
	{
		$user = JFactory::getUser();
		$upload_maxsize = 10;
		jimport('joomla.filesystem.file');

		$csvType = JRequest::getInt('csvtype');

		if( $csvType < 1 || $csvType > 3 ) {
			$this->setError('Please select CSV upload type');
			return false;
		}

		$file = JRequest::getVar('csvfile', '', 'files', 'array');

		$allowTypes = array('xlsx','xls','csv');

		if( ! in_array(JFile::getExt($file['name']), $allowTypes) )
		{
			// Error in upload
			JError::raiseWarning(100, JText::_('Your file is not supported by SFS System'));
			return false;
		}


		//xlsx

		$maxSize = (int) ($upload_maxsize * 1024 * 1024);

		if ($maxSize > 0 && (int) $file['size'] > $maxSize) {
			JError::raiseNotice(100, 'Can not upload file');
			return false;
		}
		$file['name']	= JFile::makeSafe($file['name']);

		$tmp = explode('.',$file['name']);
		$filename = 'csv'.$user->id.'.'.$tmp[1];

		$baseDir = JPATH_SITE.DS.'tmp';
		$filepath = $baseDir.DS.strtolower($filename);

		if ( ! (is_writeable($baseDir) && move_uploaded_file($file['tmp_name'], $filepath)) )
		{
			// Error in upload
			JError::raiseWarning(100, JText::_('Can not upload file'));
			return false;
		}

		$data = $this->getDataFromCSV($csvType,$filepath);


		if( empty($data) ){
			$this->setError('Your file is empty or invalid format');
			return false;
		}

		$vouchers = array();

		foreach ($data as $v) {
			$vouchers[] = array( 'first_name' => $v[0], 'last_name'=> $v[1], 'voucher_number' => $v[2]);
		}

		unlink($filepath);

		if( count($vouchers) ) {
			$blockCode = $this->getReservation();
			$session = JFactory::getSession();
			$session->clear('rooming'.$blockCode->id);
			$result = $this->save($vouchers);
			return $result;
		}
		return false;
	}

	public function getDataFromCSV($csvType,$filepath)
	{
		if($csvType < 1 || $csvType > 3) return false;

		require_once ( JPATH_COMPONENT. "/libraries/excel/PHPExcel/IOFactory.php");

		$objPHPExcel = PHPExcel_IOFactory::load($filepath);

		$rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();

		$array_data = array();

		foreach($rowIterator as $row){
		    $cellIterator = $row->getCellIterator();
		    $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set

		    $rowIndex = $row->getRowIndex ();

		    $array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'');

		    foreach ($cellIterator as $cell) {
		        if('A' == $cell->getColumn()){
		            $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();
		        } else if('B' == $cell->getColumn()){
		            $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();
		        } else if('C' == $cell->getColumn()){
		            $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();
		        }
		    }
		}

		if( count($array_data) ) {
			$data = array();
			switch ($csvType) {
				case 1:
				case 3:
					$delimiter = ( $csvType==1 ) ? ';' : '|' ;
					foreach ($array_data as $row) {
						$value = $row['A'];
						if( strlen(trim($value)) > 0 ) {
							$tmp = explode($delimiter, trim($value));
							if( is_array($tmp) && count($tmp) == 3 ) {
								$data[] = $tmp;
							}
						}
					}
					break;
				default:
					$delimiter = ',';
					foreach ($array_data as $v) {
						$data[] = array( 0 => $v['A'], 1 => $v['B'], 2 => $v['C']);
					}

					break;
			}
			return $data;
		} else {
			return false;
		}
	}

	public function getReservation( )
	{
		if ( $this->_reservation === null )
		{
			$blockCode = $this->getState('rooming.code');

			if( $blockCode )
			{
				$externalAirport = $this->getState('rooming.airport');
				if( !$externalAirport ){
					$this->_reservation = SReservation::getInstance( $blockCode , false , 'code' );
				} else {
					$association = SFactory::getAssociation($externalAirport);
					$this->_reservation = new SReservation ( $blockCode , false , 'code', $association->db );
				}
				if ($this->_reservation->hotel_id) {
					$db = $this->getDbo();
					$query = 'SELECT COUNT(*) FROM #__sfs_voucher_requests WHERE reservation_id='.$this->_reservation->id.' AND	hotel_id='.$this->_reservation->hotel_id;
					$db->setQuery($query);
					$result = (int) $db->loadResult();

					if( $result > 0 ) {
						$this->_reservation->set('minimum_guarantee_voucher',1);
					}
				}
			}
		}
		return $this->_reservation;
	}

	//get voucher codes that generated by airline
	public function getVouchers( $key = 'code' )
	{
		if( $this->_vouchers === null ) {

			$reservation = $this->getReservation();

			if( $reservation->id ) {

				$db = $reservation->getDbo();

				$query = $db->getQuery(true);
				$query->select('a.id, a.seats, a.code, count(b.id) AS number_guest');
				$query->from('#__sfs_voucher_codes AS a');

				$query->leftJoin('#__sfs_voucher_details AS b ON b.voucher_id=a.id');

				$query->where('a.booking_id='.$reservation->id);
				$query->where('a.status < 3');

				$query->group('a.id');

				$db->setQuery($query);

				$result = $db->loadObjectList($key);

				if( count($result) ) {
					$this->_vouchers = $result;
				} else {
					if( $db->getErrorNum() ) {
						$this->setError($db->getErrorMsg());
					}
				}

//				var_dump($this->_vouchers);die;
			}
		}
		return $this->_vouchers;
	}



	public function getPassengers()
	{
		$reservation = $this->getReservation();
		
		if( is_object($reservation) && $reservation->id > 0 )
		{
			$db = $reservation->getDbo();

			$query = $db->getQuery(true);

            $query->select('v.id,v.vgroup,v.code');
            $query->from('#__sfs_voucher_codes AS v');
            $query->where('v.booking_id='.$reservation->id);
            $db->setQuery($query);
            $voucherList = $db->loadObjectList();
           
            $passengers = array();
            $result = new stdClass();
           
            foreach($voucherList as $v)
            {
                $voucherID = $v->id;
                
                $query = $db->getQuery(true);
                $query->select('p.*, c.code');
                $query->from('#__sfs_voucher_codes AS c');
                $query->innerJoin('#__sfs_passengers AS p ON c.id = p.voucher_id');
                $query->where('c.id='. $voucherID);
                

				$db->setQuery($query);
				$result = $db->loadObjectList();
            	
				
                if( $db->getErrorNum() ) {
                    $this->setError($db->getErrorMsg());
                }

                foreach($result as $p)
                {
                	array_push($passengers, $p);
                    
                }
            }
			return $passengers;

		}
		return null;
	}

    public function getTracePassengers()
    {
        $reservation = $this->getReservation();

        if( is_object($reservation) && $reservation->id > 0 )
        {
            $db = $reservation->getDbo();

            $query = $db->getQuery(true);

            $query->select('v.id,v.vgroup,v.code');
            $query->from('#__sfs_voucher_codes AS v');
            $query->where('v.booking_id='.$reservation->id);
            $db->setQuery($query);
            $voucherList = $db->loadObjectList();
            $passengers = array();
            
            foreach($voucherList as $v)
            {
                $voucherID = $v->id;
                
                $query = $db->getQuery(true);
                $query->select('p.*, c.code');
                $query->from('#__sfs_voucher_codes AS c');
                $query->leftJoin('#__sfs_trace_passengers AS p ON c.id = p.voucher_id');
                $query->where('c.id='. $voucherID);

				// $queryGroup = $db->getQuery(true);
				// $queryGroup->select('g.code')
				// 	->from('#__sfs_voucher_groups as g')
				// 	->where('g.voucher_group_id='. $voucherID);
				$db->setQuery($query);
				$voucherGroup = $db->loadObjectList();

                if($voucherGroup)
                {
                        $query = $db->getQuery(true);
                        $query->select('p.*, g.code');
                        $query->from('#__sfs_voucher_codes AS g');
                        $query->leftJoin('#__sfs_trace_passengers AS p ON p.voucher_id = g.id');
                        $query->where('g.id='.$voucherID);
                }

                $db->setQuery($query);
                $result = $db->loadObjectList();

                if( $db->getErrorNum() ) {
                    $this->setError($db->getErrorMsg());
                }

                foreach($result as $p)
                {
                	#echo '<pre>';
                	#print_r($p);
                    $passengers[] = $p;
                }
            }

            return $passengers;
        }

        return null;
    }

	public function getPassengersByVouchers($voucher_code, $block_code)
	{
		$pass = $this->getPassengers();
        $db = $this->getDbo();
        $query = $db->getQuery(true);
        $query->select('c.code, p.id, p.first_name, p.last_name');
        $query->from('#__sfs_voucher_codes AS c');
        $query->leftjoin('#__sfs_trace_passengers AS p ON c.id=p.voucher_id');
        $query->leftjoin('#__sfs_reservations AS r ON r.id=c.booking_id');
        $query->where('c.code="'.$voucher_code.'"');
        $query->where('r.blockcode="'.$block_code.'"');
        $db->setQuery($query);
        $result = $db->loadObjectList();
        return $result;
	}

	/*
	 * Method to get the total of passengers
	 */
	public function getGuestTotal()
	{
		if( $this->_passenger_maxium_number === null ) {
			$result = 0;
			$reservation = $this->getReservation();
			if( is_object($reservation) && $reservation->id > 0){
				$vouchers = $this->getVouchers();
				if(count($vouchers)) {
					foreach ($vouchers as $voucher) {
						$result += (int)$voucher->seats;
					}
				}

			}
			if( $result > 0 ) $this->_passenger_maxium_number = $result;
		}
		return $this->_passenger_maxium_number;
	}


	public function getAirline()
	{
		$reservation = $this->getReservation();
		if( $reservation )
		{
			$db = $reservation->getDbo();
			$query = $db->getQuery(true);

			$query->select('a.*,b.name,b.code');
			$query->from('#__sfs_airline_details AS a');
			$query->leftJoin('#__sfs_iatacodes AS b ON b.id=a.iatacode_id');
			$query->where('a.id='.$reservation->airline_id);

			$db->setQuery($query);

			$airline = $db->loadObject();

			if($db->getErrorNum())
			{
				$this->setError($db->getErrorMsg());
				return false;
			}

			if( $airline->company_name ) $airline->name = $airline->company_name;

			$query  = 'SELECT a.*,u.email FROM #__sfs_contacts AS a';
			$query .= ' INNER JOIN #__users AS u ON u.id=a.user_id';
			$query .= ' WHERE a.user_id='.$reservation->booked_by.' AND u.block=0';

			$db->setQuery($query);

			$airline->booked_user = $db->loadObject();

			return $airline;
		}
		return null;
	}

	public function getMessages()
	{
		$result = null;
		$reservation = $this->getReservation();
		if($reservation)
		{
			$result = $reservation->getMessages();
		}
		return $result;
	}

	public function requestVoucher()
	{
		$reservation = $this->getReservation();

		if ( isset($reservation) && !empty($reservation->blockcode) )
		{
			$rv = new stdClass();
			$rv->hotel_id = $reservation->hotel_id;
			$rv->reservation_id = $reservation->id;
			$db = $this->getDbo();

			if( !$db->insertObject('#__sfs_voucher_requests', $rv) ) {
				//$this->setError($db->getErrorMsg());
				return false;
			}

			//email to SFS Admin
			$query = $db->getQuery(true);
			$query->select('u.email');
			$query->from('#__users AS u');

			$query->innerJoin('#__user_usergroup_map AS g ON g.user_id=u.id');

			$query->where('g.group_id=7 OR g.group_id=8');

			$db->setQuery($query);

			$adminUsers = $db->loadObjectList();

			$hotel = SFactory::getHotel();

			if( count($adminUsers) ) {
				$link = JURI::root().'administrator/index.php?option=com_sfs&view=reservation&layout=issuevoucher&id='.$reservation->id;
				foreach ($adminUsers as $admin) {
					$bodyE = 'Hi Administrator<br /><br />The hotel named '.$hotel->name.' is requesting you for free release vouchers.<br /><br />Clicking the following url '.$link;
					JUtility::sendMail(JFactory::getUser()->get('email'), JFactory::getUser()->get('name'), $admin->email, 'Voucher Request', $bodyE, true);
				}
			}
			return true;
		}
		return false;
	}

	public function getGuaranteeVoucher()
	{
		$db = $this->getDbo();
		$reservation = $this->getReservation();
		$hotel = SFactory::getHotel();

		if( !empty($reservation) )
		{
			$query = $db->getQuery(true);

			$query->select('b.*');
			$query->from('#__sfs_voucher_requests AS a');

			$query->innerJoin('#__sfs_fake_vouchers AS b ON b.reservation_id=a.reservation_id ');

			$query->where('a.reservation_id='.$reservation->id);
			$query->where('a.hotel_id='.$hotel->id);

			$db->setQuery($query);

			$result = $db->loadObject();

			if($result) {
				return $result;
			}
		}

		return null;
	}


	//begin CPhuc

	public function getVoucherByBlockcode(){
		$blockcode = JRequest::getVar('code');

		$db = $this->getDbo();
		$query = $db->getQuery(true);

		$query->select('b.*');
		$query->from('#__sfs_reservations AS a');
		$query->leftJoin('#__sfs_voucher_codes AS b ON a.id = b.booking_id');
		$query->where('a.blockcode = "'.(string)$blockcode.'"');
		$db->setQuery($query);
		$result = $db->loadObjectList();

		return $result;
	}

	//end CPhuc
}

